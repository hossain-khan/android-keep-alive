<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
    <uses-permission android:name="android.permission.FOREGROUND_SERVICE_SPECIAL_USE" />
    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
    <uses-permission android:name="android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS" />

    <!--
    **`android.permission.POST_NOTIFICATIONS`:** Prior to Android 13, this permission was granted automatically
    when the app was installed. From Android 13 onwards, apps need to request this permission at runtime.
    -->
    <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />

    <!--
    **`android.permission.QUERY_ALL_PACKAGES`:** This permission is considered high-risk and requires special handling.
    Apps requesting this permission need to declare it in the manifest and be granted access through a special process,
    typically involving user interaction in the device settings or through Google Play's app review process.
    https://developer.android.com/training/package-visibility
    -->
    <uses-permission android:name="android.permission.QUERY_ALL_PACKAGES"
        tools:ignore="QueryAllPackagesPermission" />

    <!--
    **`android.permission.PACKAGE_USAGE_STATS`:** This is a protected permission that allows access to sensitive user data.
    Users need to grant this permission manually through the device settings, usually in the "Special app access" or "Battery usage" sections.
    -->
    <uses-permission
        android:name="android.permission.PACKAGE_USAGE_STATS"
        tools:ignore="ProtectedPermissions" />

    <!--
        Ensure Permissions
        Make sure your app has the required permission to start activities from the background.
        From Android 10 (API level 29), apps need the SYSTEM_ALERT_WINDOW permission to launch activities from the background.

        When your app's WindowStopped is set to true, it means that your app's activity has been stopped,
        which typically occurs when the app is no longer visible to the user. Starting a new activity when
        your app's WindowStopped is true is restricted on newer versions of Android due to the background activity launch restrictions.

        Understanding the Restriction
        Starting from Android 10 (API level 29), apps are restricted from launching activities from the background
        to improve the user experience and reduce unexpected interruptions.
    -->
    <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />

    <application
        android:name=".KeepAliveApplication"
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.KeepALive"
        tools:targetApi="31">
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:label="@string/app_name"
            android:theme="@style/Theme.KeepALive">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <!--
            WatchdogService: This service runs in the foreground with a special use case.
            It is responsible for monitoring and ensuring the app's continuous operation.

            "specialUse"`: This attribute specifies that the service is a special use foreground service.
            It indicates that the service performs a task that is critical to the app's functionality and should not be interrupted.
        -->
        <service
            android:name=".service.WatchdogService"
            android:foregroundServiceType="specialUse" />

        <receiver
            android:name=".broadcast.BootCompleteReceiver"
            android:directBootAware="true"
            android:enabled="true"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.BOOT_COMPLETED" />
                <!--
                    Broadcast Action: This is broadcast once, after the user has finished booting, but while still in the "locked" state.
                    It can be used to perform application-specific initialization, such as installing alarms.
                    You must hold the Manifest.permission.RECEIVE_BOOT_COMPLETED permission in order to receive this broadcast.

                    This broadcast is sent immediately at boot by all devices (regardless of direct boot support) running Build.
                    VERSION_CODES.N or higher. Upon receipt of this broadcast, the user is still locked and only device-protected
                    storage can be accessed safely. If you want to access credential-protected storage, you need to wait
                    for the user to be unlocked (typically by entering their lock pattern or PIN for the first time),
                    after which the ACTION_USER_UNLOCKED and ACTION_BOOT_COMPLETED broadcasts are sent.

                    To receive this broadcast, your receiver component must be marked as being ComponentInfo.directBootAware.
                    This is a protected intent that can only be sent by the system.
                -->
                <action android:name="android.intent.action.LOCKED_BOOT_COMPLETED" />
                <action android:name="android.intent.action.MY_PACKAGE_REPLACED" />
            </intent-filter>
        </receiver>
    </application>
</manifest>