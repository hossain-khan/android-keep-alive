name: Test APK Signing Using Keystore

# This workflow tests the production keystore configuration to ensure it works properly
# with the Android build system. It validates that the keystore can be decoded, passwords
# are correct, and jarsigner can successfully sign APKs.
#
# This workflow requires the following GitHub secrets to be set up in your repository:
#
# 1. KEYSTORE_BASE64: The base64-encoded contents of your production keystore file (e.g., release.keystore).
#    To generate this value, run:
#      base64 -i path/to/your/release.keystore | pbcopy
#    Then paste the copied value into the secret.
#
# 2. KEYSTORE_PASSWORD: The password for your keystore.
#
# 3. KEY_ALIAS: The alias of the key inside your keystore.
#
# To add these secrets:
# - Go to your repository on GitHub.
# - Click on Settings > Secrets and variables > Actions.
# - Click "New repository secret" and add each secret above.
#
# This ensures the workflow can decode and use your keystore for signing and building APKs.

on:
  workflow_dispatch:

jobs:
  test-apk-signing:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Create test directory
        run: mkdir -p keystore-test

      - name: Decode keystore from base64
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > keystore-test/release.keystore

      - name: Verify keystore basic properties
        run: |
          echo "=== Keystore Basic Information ==="
          keytool -list -keystore keystore-test/release.keystore -storepass "${{ secrets.KEYSTORE_PASSWORD }}" | grep -v "Certificate fingerprint"

      - name: Check alias exists
        run: |
          echo "=== Checking Alias ==="
          if keytool -list -keystore keystore-test/release.keystore -storepass "${{ secrets.KEYSTORE_PASSWORD }}" -alias "${{ secrets.KEY_ALIAS }}" > /dev/null 2>&1; then
            echo "✅ Alias '${{ secrets.KEY_ALIAS }}' exists in keystore"
          else
            echo "❌ Alias '${{ secrets.KEY_ALIAS }}' not found in keystore"
            exit 1
          fi

      - name: Test jarsigner functionality
        run: |
          echo "=== Testing jarsigner ==="
          
          # Create a simple JAR to test signing
          echo "Test content" > keystore-test/test.txt
          jar cf keystore-test/test.jar keystore-test/test.txt
          
          # Test signing WITH explicit key password (required for PKCS12)
          echo "Testing jarsigner with explicit key password..."
          if jarsigner -keystore keystore-test/release.keystore \
                      -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
                      -keypass "${{ secrets.KEY_PASSWORD }}" \
                      keystore-test/test.jar \
                      "${{ secrets.KEY_ALIAS }}" > keystore-test/jarsigner.txt 2>&1; then
            echo "✅ jarsigner succeeded (store and key password provided)"
            echo "✅ This confirms the keystore is compatible with our build configuration"
          else
            echo "❌ jarsigner failed even with explicit key password"
            cat keystore-test/jarsigner.txt
            exit 1
          fi
          
          # Verify the signed JAR
          if jarsigner -verify keystore-test/test.jar > keystore-test/verify.txt 2>&1; then
            echo "✅ Signed JAR verification successful"
          else
            echo "❌ Signed JAR verification failed"
            cat keystore-test/verify.txt
            exit 1
          fi

      - name: Test Android build configuration
        run: |
          echo "=== Testing Android Build Configuration ==="
          
          # Decode keystore to the expected location
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > keystore/keep-alive.keystore
          
          # Set up Gradle
          chmod +x gradlew
          
          # Test the release build with production keystore
          echo "Building release APK with production keystore..."
          if ./gradlew assembleRelease > keystore-test/gradle-build-release.txt 2>&1; then
            echo "✅ Android release build succeeded with production keystore"
          
            # Verify the APK exists
            if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
              echo "✅ Release APK generated successfully"
              echo "✅ Release build is now properly signed with production keystore"
            else
              echo "❌ Release APK not found"
              exit 1
            fi
          else
            echo "❌ Android release build failed"
            echo "Build output:"
            cat keystore-test/gradle-build-release.txt
            exit 1
          fi
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: keystore-test-results
          path: keystore-test/
          retention-days: 7